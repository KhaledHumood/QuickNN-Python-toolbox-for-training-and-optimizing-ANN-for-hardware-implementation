import numpy as np
import pickle
import scipy.io
import copy 
from import_data import import_data
from NN_train import NeuralNetwork


############################ Configure the NN ######################################
## MNIST image customization (chose the number of pixels and resolution of the inputs)
image_size = 28 # width and length of the desired image size ‎(original images is 28x28 size)‎
res_inputs = 4 # desired resolution of the MNIST image pixel (original images is 8 bits resolution)
excel_path = "MNIST_EXCEL_LOCATION" #excel file paths
pkl_path = 'PKL_LOCATION_(to be generated by import_data)' #generated pkl file path
file_name = 'pickled_mnist.pkl'
image_pixels = image_size * image_size

########## Import raw data and create the modifided data in pkl format
# (only run once then comment to save on run time)
import_data(image_size, res_inputs, excel_path, pkl_path, file_name)

##Create the NN structure
epochs = 10 # specify the number of epochs for training 
batch = 60000 # specify the batch size of training images
network_structure=[image_pixels, 100, 10] # add or remove layers
Quantization = False # True = ternary quantization, False = No Quantization
QuantizeLayer = False # True = Output of hidden layers are quantized 
QuantizeLayer_res = 4 # Quantize the outputs  layer into 16 levels
intermediate_results = True # True = save intermediate weights False = Dont save weights
learning_rate = 0.1
## when using predified weights make sure the weight sizes and number of weights is 
## compatible with the network structure, weights need to be in the following size
## weight1 = [input nodes,output nodes]
predifiend_weights = False # False no predified weights True use predified weights 
weights_pre = [] ## change this with your predefined weights arrays

######################## load the data ###################################
with open(pkl_path + file_name, "br") as fh:
    data = pickle.load(fh)
train_imgs = data[0]
test_imgs = data[1]
train_labels = data[2]
test_labels = data[3]
no_of_different_labels = 10 #  i.e. 0, 1, 2, 3, ..., 9
lr = np.arange(no_of_different_labels)
train_labels_one_hot = (lr==train_labels).astype(np.float)
test_labels_one_hot = (lr==test_labels).astype(np.float)
train_labels_one_hot[train_labels_one_hot==0] = 0
train_labels_one_hot[train_labels_one_hot==1] = 1
test_labels_one_hot[test_labels_one_hot==0] = 0
test_labels_one_hot[test_labels_one_hot==1] = 1

########################### Create, train and test the NN ######################
ANN = NeuralNetwork(network_structure=network_structure, 
                    learning_rate=learning_rate,QuantizeLayer=QuantizeLayer, QuantizeLayer_res=QuantizeLayer_res)

# for predified weights only 
if predifiend_weights == True:
    ANN.import_pre_weights(weights_pre)

## weights training     
weights = ANN.train(train_imgs, train_labels_one_hot, 
                    test_imgs, test_labels, epochs=epochs, batch=batch,
                        intermediate_results=intermediate_results,
                    Quantization=Quantization)

# weight evaluating for all epochs
for i in range(epochs):  
    print("epoch: ", i+1)
    ANN.weights_matrices = weights[i]
    corrects, wrongs = ANN.evaluate(train_imgs, train_labels)
    print("accuracy train: ", corrects / ( corrects + wrongs))
    corrects, wrongs = ANN.evaluate(test_imgs, test_labels)
    print("accuracy: test", corrects / ( corrects + wrongs)))
    
    
## save last epoch weights in matlab file (optional, comment if not needed)
weights2 = np.array(ANN.weights_matrices)
for i in range(weights2.shape[0]):
    weights2[i] = weights2[i].T
weights2 = weights2.tolist() 
scipy.io.savemat(pkl_path + 'weights_NN.mat', mdict={'weights_NN': weights2})

